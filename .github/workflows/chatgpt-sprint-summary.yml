name: ChatGPT Sprint Summary

on:
  schedule:
    - cron: '0 14 * * *'  # 每天 UTC 14:00 (台灣時間 22:00)
  workflow_dispatch:  # 允許手動觸發

jobs:
  generate_summary:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Latest Issues
        id: fetch_issues
        run: |
          issues=$(gh issue list --state open --limit 5 --json body | jq -r 'map(.body) | join("\n\n---\n\n")')
          echo "Fetched Issues: $issues"
          echo "issues=$issues" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug API Key
        run: |
          if [[ -z "${{ secrets.OPENAI_API_KEY }}" ]]; then
            echo "OPENAI_API_KEY 未設置，請檢查 GitHub Secrets"
            exit 1
          else
            echo "OPENAI_API_KEY 已設置"
          fi

      - name: Send Issues to ChatGPT
        id: chatgpt_request
        run: |
          # 確保 issues 變數內容為純文字，並格式化 JSON
          JSON_DATA=$(jq -n --arg issues "${{ env.issues }}" \
          '{"model": "gpt-4", "messages": [{"role": "system", "content": "請根據以下 GitHub Issues 總結 Sprint 進度並提供建議。"}, {"role": "user", "content": $issues}], "temperature": 0.7}')

          echo "Sending JSON Data:"
          echo "$JSON_DATA"

          # 發送 API 請求
          response=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d "$JSON_DATA")

          echo "ChatGPT Response:"
          echo "$response"

          # 解析 API 回應內容
          summary=$(echo "$response" | jq -r '.choices[0].message.content // "⚠️ 無回應，請檢查 API Key 或 OpenAI 伺服器狀態"')

          if [[ -z "$summary" || "$summary" == "⚠️ 無回應，請檢查 API Key 或 OpenAI 伺服器狀態" ]]; then
            echo "OpenAI API 沒有返回內容，請檢查 API Key 或 OpenAI 伺服器狀態"
            exit 1
          fi

          echo "summary=$summary" >> $GITHUB_ENV
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Save Summary as Markdown
        run: |
          SUMMARY_FILE="sprint-summary-$(date +'%Y-%m-%d').md"
          echo "## Sprint 回顧 - $(date +'%Y-%m-%d')" > $SUMMARY_FILE
          echo "" >> $SUMMARY_FILE
          echo "${{ env.summary }}" >> $SUMMARY_FILE
          echo "Markdown file saved as $SUMMARY_FILE"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and Push Report
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add sprint-summary-*.md
          git commit -m "自動生成 Sprint 回顧報告 - $(date +'%Y-%m-%d')" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
